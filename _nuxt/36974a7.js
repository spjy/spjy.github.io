(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{509:function(n,r,e){"use strict";e.r(r),r.default='---\r\nheader: Discrete Math\r\ndescription: Integer number of things.\r\n---\r\n\r\n# Basics of Math\r\n\r\n### Variables\r\n\r\nVariables are a placeholder for an unknown value to generalize it.\r\n\r\n### Mathematical Statements\r\n\r\n| Type        | Description                     | Example           |\r\n| ----------- | ------------------------------- | ----------------- |\r\n| Universal   | True for all elements in a set. | "For all ..."     |\r\n| Conditional | True under a constraint.        | "If ... then ..." |\r\n| Existential | True for at least one element.  | "There is a ..."  |\r\n\r\n# Set Notation\r\n\r\nA set is a collection of elements.\r\n\r\n### Set Roster Notation\r\n\r\n$$S = \\left\\{ x, y, z \\right\\}$$\r\n\r\n### Symbols\r\n\r\n| Symbol | Meaning      | Example   |\r\n| ------ | ------------ | --------- |\r\n| $\\in$  | in           | $x \\in S$ - "$x$ is an element of $S$" |\r\n| $\\dots$| and so forth | $\\left\\{ 1, 2, 3, ... \\right\\}$ - "Set of all positive integers" |\r\n| $\\mathbb{R} \\text{}$ | Set of all real numbers | $\\left\\{ ..., -1, -\\frac{1}{2}, 0, \\frac{1}{2}, 1, ... \\right\\}$ |\r\n| $\\mathbb{Z} \\text{}$ | Set of all integers | $\\left\\{ ..., -2, -1, 0, 1, 2, ... \\right\\} \\text{}$ |\r\n| $\\mathbb{Q} \\text{}$ | Set of all rational numbers, quotients of integers | - |\r\n\r\n### Axiom of Extension\r\n\r\nA set is defined by its elements, not its element\'s order or frequency.\r\n\r\n### Set Builder Notation\r\n\r\nSet builder notation is a shorthand method to describe a set\'s elements. We can write it like:\r\n\r\n| Notation                                     | Translation |\r\n| -------------------------------------------- | ----------- |\r\n| $\\left\\{ x \\in S \\mid P(x) \\right\\} \\text{}$ | The set of all elements $x$ in $S$ such that $P(x)$ is true. | \r\n\r\nFor instance, these two sets are equivilent:\r\n\r\n$$\\left\\{ x \\in \\mathbb{R} \\mid 10 \\le x \\le 15 \\right\\} = \\left\\{10, 11, 12, 13, 14, 15 \\right\\}$$\r\n\r\n### Subset\r\n\r\nLet $A$ and $B$ be sets. If $A$ is a subset of $B$, or $A \\subseteq B$, then each element of $A$ is also an element of $B$. In other words, $A$ is contained in $B$ and $B$ contains $A$.\r\n\r\n| Notation         | Translation |\r\n------------------ | ----------- |\r\n| $A \\subseteq B$  | $\\forall$ elements $x$, if $x \\in A$ then $x \\in B$. | \r\n| $A \\subsetneq B$ | There is at least one element $x \\mid x \\in A, x \\not\\in B$ |\r\n\r\n#### Subset Example\r\n\r\nLet\'s say $A$ and $B$ are sets.\r\n\r\n$$A = \\left\\{ 1,2,3 \\right\\}$$\r\n$$B = \\left\\{ 1,2,3,4 \\right\\}$$\r\n\r\n$A \\subseteq B$ because each element $x$ (1, 2 and 3) in $A$ exists in $B$.\r\n\r\n#### Non-Subset Example\r\n\r\nLet\'s say $A$ and $B$ are sets.\r\n\r\n$$A = \\left\\{ 1,2,3 \\right\\}$$\r\n$$B = \\left\\{ 1,2,4 \\right\\}$$\r\n\r\n$A \\subsetneq B$ because the element $3$ in $A$ does not exist in $B$.\r\n\r\n### Proper Subset\r\n\r\n- Let $A$ and $B$ be sets.\r\n- If $A$ is a proper subset of $B$, then each element of $A$ is in $B$.\r\n- There is at least one element of $B$ not in $A$.\r\n\r\nIn other words, $A$ cannot equal $B$. There must be at least one element that differs between the two sets.\r\n\r\n### Ordered Pair\r\n\r\n- Let $a$ and $b$ be elements.\r\n- $(a, b)$ is an ordered pair with $a$ and $b$ together such that $a$ is the first element of the pair and $b$ is the second. \r\n\r\nLet $c$ and $d$ be two other elements, and let $(c, d)$ be another ordered pair. \r\n\r\n$(a, b)$ = $(c, d)$ is true if $a=c$ and $b=d$.\r\n\r\n# Relations and Functions\r\n\r\n### Cartesian Product\r\n\r\n- Let $A$ and $B$ be sets.\r\n- The Cartesian product of $A$ and $B$, or $A \\times B$, is the set of all ordered pairs $(a, b)$ such that $a \\in B$ and $b \\in B$ is:\r\n\r\n$$A \\times B = \\left\\{ (a, b) \\mid a \\in A, b \\in B \\right\\}$$\r\n\r\n#### Cartesian Product Example\r\n\r\nLet $A = \\left\\{ 1, 2 \\right\\}$ and $\\left\\{ 3, 4 \\right\\}$. The Cartesian product of $A$ and $B$ is:\r\n\r\n$$A \\times B = \\left\\{ (1, 3), (1, 4), (2, 3), (2, 4) \\right\\} \\text{}$$\r\n\r\n#### Cartesian Product and Cartesian Plane\r\n\r\nThe points on the Cartesian Plane can be expressed in the following way:\r\n\r\n$$\\bold R \\times \\bold R = \\{ (x,y) \\mid x \\in \\mathbb R, y \\in \\mathbb R \\}$$\r\n\r\n### Relationships\r\n\r\nA relationship is the connection between two different things.\r\n\r\n- Let $A$ and $B$ be sets.\r\n- A relation set $R$ from $A$ to $B$ is a subset of $A \\times B$ ($R \\subseteq A \\times B$).\r\n\r\nNow we can say:\r\n\r\n- Given an ordered pair $(x, y) \\in A \\times B$, we can state $x$ is related to $y$ by $R$, or $x$ $R$ $y$ iff $(x, y) \\in R$.\r\n- $A$ is the domain of $R$\r\n- $B$ is the co-domain.\r\n- $x$ $R$ $y$ means $(x,y) \\in R$.\r\n- $x$ $\\not{R}$ $y$ means $(x,y) \\not\\in R$.\r\n\r\nIn other words, we can relate the elements of the ordered pair $(x,y)$ of the cartesian product of $A$ and $B$ ($A \\times B$) by imposing a constraint on a third relational set and seeing if the pair is contained in $R$.\r\n\r\nThis lays the framework for function notation.\r\n\r\n### Functions\r\n\r\nA function $F$ from a set $A$ to set $B$ is the relationship between the domain $A$ and co-domain $B$. It has the restrictions that:\r\n\r\n- $\\forall x \\in A, \\exists y \\in B \\mid (x,y) \\in F$\r\n- $\\forall x \\in A$ and $y,z \\in B$, if $(x, y) \\in F$ and $(x,z) \\in F \\implies y=z$\r\n\r\nIn other words, for each $x$ in the domain, there exists a value $y$ for $x$ in the co-domain. This is expressed as an ordered pair that is in $F$, $(x,y) \\in F$. Additionally, each element $x$ in the domain may map to only one value $y$ in the co-domain (each ordered pair in $F$ is distinct).\r\n\r\n#### Function Notation\r\n\r\nIf $A$ and $B$ are sets and $F$ is a function from $A$ to $B$, then given any element $x \\in A$, the unique element in $B$ that is related to $x$ by $F$ is $F(x)$, read as F of x.\r\n\r\n#### Function Mapping Notation\r\n\r\nLet $A$ and $B$ be sets and $f$ be a function. If $x \\in A$ and $y \\in B$, a function $f: A \\rightarrow B$ is defined by $f: x \\mapsto y$ means $f(x) = y$, the domain is defined on the set $A$ and the co-domain is defined on the set $B$.\r\n\r\n#### Function Equality\r\n\r\nLet $f$ and $g$ be functions.\r\n\r\n$f=g$ iff $f(x) = g(x) \\forall x \\in A$.\r\n\r\n# Logic and Statements\r\n\r\n### Logical Connective Symbols\r\n\r\n| Symbol   | Meaning           |\r\n| -------- | ----------------- |\r\n| $\\lnot$  | negation (not)    |\r\n| $\\wedge$ | conjunction (and) |\r\n| $\\vee$   | disjunction (or)  |\r\n\r\n### Structure\r\n\r\nA compound statement is composed of:\r\n\r\n- [Premises](#premise): Statements.\r\n- [Conclusion](#conclusion): An assertion based on premises.\r\n\r\nIt usually takes the form of: \r\n\r\nIf $p$ or $q$, then $r$. $q$. Therefore, $r$.\r\n\r\nThere is also:\r\n\r\n| Structure           | Translation      |\r\n| ------------------- | ---------------- |\r\n| $p$ but $q$         | $p \\wedge q$     |\r\n| neither $p$ nor $q$ | $\\lnot p$ $\\vee$ $\\lnot q$ |\r\n\r\n### Statements\r\n\r\nA statement is a sentence that is true or false but not both.\r\n\r\n#### Statement Examples\r\n\r\n- True: $1+1 = 2$\r\n- False: $1+1 = 3$\r\n\r\n#### Non-statement Examples\r\n\r\n- $x + y > 0$ since it is true for some values but not for values $x + y \\leq 0$\r\n\r\n### Statement (Propositional) Form\r\n\r\nA statement form is one that contains statement variables and [logical connectives](#logical-connective-symbols) only.\r\n\r\nFor example, the statement form of "$\\text{My clothes are }$$\\underbrace{\\text{clean}}_p$ $\\text{and not }$$\\underbrace{\\text{wrinkled}}_q$" would be $p$ $\\wedge$ $\\lnot q$.\r\n\r\n### Truth Table\r\n\r\nA truth table contains all of the possible combinations of a statement.\r\n\r\n### Negation Truth Table\r\n\r\n| $p$ | $\\lnot p$ |\r\n| - | - |\r\n| T | F |\r\n| F | T |\r\n\r\n### Conjunction Truth Table\r\n\r\n| $p$ | $q$ | $p \\wedge q$ |\r\n| - | - | - |\r\n| T | T | T |\r\n| T | F | F |\r\n| F | T | F |\r\n| F | F | F |\r\n\r\n### Disjunction Truth Table\r\n\r\n\r\n| $p$ | $q$ | $p \\vee q$ |\r\n| - | - | - |\r\n| T | T | T |\r\n| T | F | T |\r\n| F | T | T |\r\n| F | F | F |\r\n\r\n### Logical Equivalence\r\n\r\nBeing logically equivalent means that two statement forms have identical truth values for each combination possibility.\r\n\r\nIf $P$ and $Q$ are two [statement forms](#statement-propositional-form) and they are logically equivalent, then $P \\equiv Q$.\r\n\r\n### Tautology\r\n\r\nA statement form that is always true in every interpretation.\r\n\r\n### Contradiction\r\n\r\nA statement form that is always false in every interpretation.\r\n\r\n#### Tautology and Contradiction Example\r\n\r\nA tautology is denoted as $t$, while a contradiction is denoted as $c$.\r\n\r\n| $p$ | $\\lnot p$ | $p \\lor \\lnot p$ | $p \\land \\lnot p$ |\r\n| --- | - | - | - |\r\n| T | F | T | F |\r\n| F | T | T | F |\r\n\r\n$p \\lor \\lnot p$ is the definition of a tautology. All interpretations are true.\r\n\r\n$p \\land \\lnot p$ is the definition of a contradiction. All interpretations are false.\r\n\r\n# Conditional Statements\r\n\r\nA conditional statement has the form: If $p$ then $q$. More formally, the notation is $p \\rightarrow q$, which means $p$ implies $q$.\r\n\r\nThe truthfulness of $q$ is dependent on the statement of $p$.\r\n\r\n### Hypothesis (Antecedent)\r\n\r\nThe if statement ($p$).\r\n\r\n### Conclusion (Consequent)\r\n\r\nThe then statement ($q$).\r\n\r\n### Conditional Statement Truth Table\r\n\r\n| $p$ | $q$ | $p \\rightarrow q$ |\r\n| - | - | - |\r\n| T | T | T |\r\n| T | F | F |\r\n| F | T | T |\r\n| F | F | T |\r\n\r\n### Vacuously True\r\n\r\nAn if statement is **vacuously true** (true by default) if the hypothesis is false.\r\n\r\n### Conditional Statement as Or\r\n\r\nA conditional statement is equivalent to the negation of the hypothesis ORed with the consequence.\r\n\r\n$$p \\rightarrow q \\equiv \\lnot p \\lor q$$\r\n\r\n#### Conditional Statement as Or Example\r\n\r\n- **Or**: $\\text{Either } \\underbrace{\\text{you do the dishes}}_p \\text{ or } \\underbrace{\\text{you will not get desert}}_q$.\r\n- **Conditional**: $\\text{If } \\underbrace{\\text{you do not do the dishes}}_{\\lnot p}, \\underbrace{\\text{you will not get desert}}_q$.\r\n\r\n\r\n### Negation of Conditional Statement\r\n\r\nIf we negate a conditional statement, the resulting statement will be the hypothesis ANDed with the negation of the consequent.\r\n\r\n$$\\lnot (p \\rightarrow q) \\equiv p \\land \\lnot q$$\r\n\r\n#### Negation of Conditional Statement Example\r\n\r\n- **Conditional**: If I eat dinner, I will not be hungry.\r\n- **Negated Conditional $\\rightarrow$ And Statement**: I ate dinner and I am hungry.\r\n\r\n### Contrapositive of Conditional Statement\r\n\r\nA conditional statement is equivalent to the conditional statement of the negated hypothesis and negated consequence.\r\n\r\n$$p \\rightarrow q \\equiv \\lnot q \\rightarrow \\lnot p$$\r\n\r\n### Contrapositive of Conditional Statement Example\r\n\r\n- **Conditional**: If I drive to work, I will be on time.\r\n- **Contrapositive**: If I am not on time, then I did not drive to work.\r\n\r\n### Converse of Conditional Statement\r\n\r\nLet "$p \\rightarrow q$" be a conditional statement.\r\n\r\nThe **converse** of the statement is:\r\n\r\n$$q \\rightarrow p$$\r\n\r\n### Inverse of Conditional Statement\r\n\r\nLet "$p \\rightarrow q$" be a conditional statement.\r\n\r\nThe **inverse** of the statement is:\r\n\r\n$$\\lnot p \\rightarrow \\lnot q$$\r\n\r\n### Only If\r\n\r\n$p$ only if $q$ means $p$ is true if $q$ is true, or in other words:\r\n\r\n$$\\lnot q \\rightarrow \\lnot p \\equiv p \\rightarrow q$$\r\n\r\n$p$ can happen **only if** $q$ happens. Therefore, if $q$ does not occur, $p$ cannot occur.\r\n\r\n### Biconditional\r\n\r\nLet $p$ and $q$ be statement variables.\r\n\r\nThe **biconditional** of $p$ and $q$ is "$p$ if and only if (iff) $q$":\r\n\r\n$$p \\leftrightarrow q$$\r\n\r\n$p$ can only happen if $q$ happens. Similarly, $q$ must be true if $p$ is true.\r\n\r\n#### Truth Table for Biconditional\r\n\r\n| $p$ | $q$ | $p \\leftrightarrow q$ |\r\n| - | - | - |\r\n| T | T | T |\r\n| T | F | F |\r\n| F | T | F |\r\n| F | F | T |\r\n\r\n### Sufficient Condition\r\n\r\nLet $r$ be a **sufficient condition** for $s$. This means:\r\n\r\n$$r \\rightarrow s$$\r\n\r\nor $r$ is sufficient to guarantee $s$ is true.\r\n\r\n### Necessary Condition\r\n\r\nLet $r$ be a **necessary condition** for $s$. This means:\r\n\r\n$$\\lnot r \\rightarrow \\lnot s$$\r\n\r\nor if $r$ is false, $s$ is false.\r\n\r\n### Sufficient and Necessary Condition\r\n\r\nLet $r$ be a **sufficient and necessary** condition. This means:\r\n\r\n$$r \\leftrightarrow s$$\r\n\r\n# Arguments\r\n\r\nAn argument is a sequence of statements.\r\n\r\n### Argument Form\r\n\r\nAn argument form is the sequence of [statement forms](#statement-propositional-form).\r\n\r\n### Premise\r\n\r\n**Premises** are statements in an argument and all statement forms in an argument form except the final one.\r\n\r\n### Conclusion\r\n\r\nA **conclusion** is the final statement or statement form.\r\n\r\n# Valid Argument Form\r\n\r\nA **valid argument form** means if the premises are all true, the conclusion is true.\r\n\r\n#### Critical Row\r\n\r\nThe **critical row** is the row of a truth table where all of the premises are true.\r\n\r\nAn argument form is said to be invalid if the [conclusion](#conclusion) is false in the critical row.\r\n\r\n### Modus Ponens\r\n\r\n**Modus Ponens** is a [valid argument form](#valid-argument-form) that says the conclusion is affirmed. It has the form:\r\n\r\n$$\r\np \\rightarrow q. \\\\\r\np. \\\\\r\n\\therefore q\r\n$$\r\n\r\n### Modus Tollens\r\n\r\n**Modus Tollens** is a [valid argument form](#valid-argument-form) that says the conclusion is a denial. It is [logically equivalent](#logical-equivalence) to [Modus Ponens](#modus-ponens) through the [contrapositive](#contrapositive-of-conditional-statement) identity. It has the form:\r\n\r\n$$\r\np \\rightarrow q. \\\\\r\n\\lnot q. \\\\\r\n\\therefore \\lnot p.\r\n$$\r\n\r\n### Rule of Inference\r\n\r\nA **rule of inference** is a [valid argument form](#valid-argument-form).\r\n\r\n#### Generalization\r\n\r\n$$\r\np. \\\\\r\n\\therefore p \\lor q.\r\n$$\r\n\r\n$$\r\nq. \\\\\r\n\\therefore p \\lor q.\r\n$$\r\n\r\n#### Elimination\r\n\r\n$$\r\np \\lor q. \\\\\r\n\\lnot q. \\\\\r\n\\therefore p.\r\n$$\r\n\r\n$$\r\np \\lor q. \\\\\r\n\\lnot p. \\\\\r\n\\therefore q.\r\n$$\r\n\r\n#### Transitivity\r\n\r\n$$\r\np \\rightarrow q. \\\\\r\nq \\rightarrow r. \\\\\r\n\\therefore p \\rightarrow r.\r\n$$\r\n\r\n### Division into Cases\r\n\r\n$$\r\np \\lor q. \\\\\r\np \\rightarrow r. \\\\\r\nq \\rightarrow r. \\\\\r\n\\therefore r.\r\n$$\r\n\r\n### Sound Argument\r\n\r\nAn argument is **sound** iff it is valid and all its premises are true.\r\n\r\n### Unsound Argument\r\n\r\nAn argument that is not sound.\r\n\r\n# Fallacy (Invalid Argument)\r\n\r\nA fallacy is an invalid argument due to an error in reasoning. In other words, the [critical row](#critical-row) contains [premises](#premise) that are true but the [conclusion](#conclusion) is false.\r\n\r\n### Converse Error\r\n\r\nThe following argument is **invalid**:\r\n\r\n$$\r\np \\rightarrow q. \\\\\r\nq. \\\\\r\n\\therefore p.\r\n$$\r\n\r\n### Inverse Error\r\n\r\nThe following argument is **invalid**:\r\n\r\n$$\r\np \\rightarrow q. \\\\\r\n\\lnot p. \\\\\r\n\\therefore \\lnot q.\r\n$$\r\n\r\n# Contradictions\r\n\r\nIf the statement $p$ is false and leads logically to a contradiction, you can conclude $p$ is true.\r\n\r\n$$\r\n\\lnot p \\rightarrow c \\\\\r\n\\therefore p\r\n$$\r\n\r\n# Number Theory\r\n\r\n### Even Integer\r\n\r\nLet $n$ be an integer.\r\n\r\n$n$ is even $\\iff \\exists$ an integer $k$ such that $n = 2k$.\r\n\r\n#### Theorem.\r\n\r\nThe sum of any two even integers is even.\r\n\r\n### Odd Integer\r\n\r\nLet $n$ be an integer.\r\n\r\n$n$ is odd $\\iff \\exists$ an integer $k$ such that $n = 2k + 1$.\r\n\r\n### Prime\r\n\r\nLet $n$ be an integer for $n > 1$.\r\n\r\n$n$ is prime $\\iff \\forall$ positive integers $r$ and $s$, if $n = rs$ then either $r = 1$ and $s = n$ or $r = n$ and $s = 1$.\r\n\r\n### Rational\r\n\r\n$r$ is rational $\\iff \\exists$ integers $a$ and $b$ such that $\\displaystyle r = \\frac{a}{b}$ and $b \\neq 0$.\r\n\r\n#### Theorem: Every integer is rational.\r\n\r\n#### Theorem: The sum of any two rational numbers is rational.\r\n\r\n#### Corollary: The double of a rational number is rational.\r\n\r\n#### Zero Product Property\r\n\r\nIf neither of two real numbers is zero, then their product is also not zero.\r\n\r\n### Irrational\r\n\r\nA real number that is not [rational](#rational) is irrational.\r\n\r\n### Standard Factored Form\r\n\r\nFor an integer $n > 1$, the standard factored from of $n$ is an expression of the form:\r\n\r\n$$n = p_1^{e_1} p_2^{e_2} p_3^{e_3} ... p_k^{e_k}$$\r\n\r\nwhere\r\n\r\n- $k$ is a positive integer\r\n- $p_1, p_2, ..., p_k$ are prime\r\n- $e_1, e_2, ..., e_k$ are positive integers\r\n- $p_1 < p_2 < ... < p_k$\r\n\r\n### Floor\r\n\r\nFor $x \\in \\mathbb{R}$, $\\lfloor x \\rfloor$ is the floor of $x$.\r\n\r\n$\\lfloor x \\rfloor = n \\iff n \\leq x \\lt n + 1$\r\n\r\n### Ceiling\r\n\r\nFor $x \\in \\mathbb{R}$, $\\lceil x \\rceil$ is the floor of $x$.\r\n\r\n$\\lceil x \\rceil = n \\iff n - 1 \\lt x \\leq n$\r\n\r\n### Divisibility\r\n\r\nIf $n, d \\in \\mathbb{Z}$ and $d \\neq 0$ then:\r\n\r\n$n$ is divisible by $d$ iff $n = d \\cdot k$ for $k \\in \\mathbb{Z}$.\r\n\r\n$n$ being divisible by $d$ also means:\r\n- $n$ is a multiple of $d$\r\n- $d$ is a factor of $n$\r\n- $d$ is a divisor of $n$\r\n- $d$ divides $n$\r\n\r\n### Divides\r\n\r\nIf $n, d \\in \\mathbb{Z}$, $d$ divides $n$ is denoted as $d \\mid n$.\r\n\r\n$d \\mid n \\iff \\exists$ an integer $k$ such that $n = dk$.\r\n\r\n# Sequences\r\n\r\n### Finite Sequence\r\n\r\n$$a_m, a_{m+1}, a_{m+2}, \\dots, a_n$$\r\n\r\n### Infinite Sequence\r\n\r\n$$a_m, a_{m+1}, a_{m+2}, \\dots, a_n$$\r\n\r\n### Explicit Formula\r\n\r\nA sequence showing how $a_k$ depends on $k$.\r\n\r\n### Summation Notation\r\n\r\n$$\\sum_{k=m}^n a_k = a_m + a_{m+1} + a_{m+2} + \\dots + a_n$$\r\n\r\n### Product Notation\r\n\r\n$$\\prod_{k=m}^n a_k = a_m \\cdot a_{m+1} \\cdot a_{m+2} \\cdot \\dots \\cdot a_n$$\r\n\r\n### Factorial\r\n\r\nFor $n \\in \\mathbb{Z}^+$,\r\n\r\n$$n! = n \\cdot (n-1) \\dots 3 \\cdot 2 \\cdot 1$$\r\n\r\n#### Zero Factorial\r\n\r\n$$0! = 1$$\r\n\r\n### Choose (Combinations)\r\n\r\nFor $n, r \\in \\mathbb{Z}^+$ and $0 \\leq r \\leq n$,\r\n\r\n$$\r\n\\left(\r\n\\begin{array}{c}\r\nn \\\\\r\nr\r\n\\end{array}\r\n\\right) =\r\n\\frac{n!}{r! (n - r)!}\r\n$$\r\n\r\nThe notation is said as $n$ choose $r$. It represents a combination where order in a set does not matter for the number of possibilities.\r\n\r\n# Functions\r\n\r\nA function describes a dependence of a varying quantity to another. Give a function $f$ from a set $x$ ([domain](#domain)) to a set $y$ ([co-domain](#co-domain)), then $f$ maps $x$ to $y$:\r\n\r\n$$f: x \\rightarrow y$$\r\n\r\n$$f(x) = y$$\r\n\r\n### Constraints\r\n\r\n- Every element in $x$ is related to some element $y$.\r\n- No element in $x$ is related to more than one element $y$.\r\n\r\n### Domain (Preimage)\r\n\r\nThe domain $x$ is the possible input values of $f$.\r\n\r\n### Co-domain\r\n\r\nThe co-domain $y$ is the possible output values of $f$.\r\n\r\n### Range (Image)\r\n\r\nThe range is the set of all values of $f$ that are actually output. It is a subset of the [co-domain](#co-domain).\r\n\r\n## Types of Functions\r\n\r\n### One-to-One (Injective)\r\n\r\nA one-to-one function means that each element in the domain $x$ maps to a unique element in the co-domain $y$.\r\n\r\nLet $f$ be a function from a set $x$ to set $y$.\r\n\r\n$$f: x \\rightarrow y \\text{ is one-to-one} \\iff \\forall x_1, x_2 \\in x, f(x_1) = f(x_2) \\rightarrow x_1 = x_2$$\r\n\r\n### Onto (Surjective)\r\n\r\nA surjective function is one in which for every $x_n \\in x$ you there is a corresponding element $y_n \\in y$. In other words, the range is equal to the co-domain.\r\n\r\n$$f:x \\rightarrow y \\text{ is onto} \\iff \\forall y_n \\in y, \\exists x_n \\in x \\mid f(x) = y$$\r\n\r\n### One-to-One Correspondence (Bijection)\r\n\r\nA bijective function is both [injective](#one-to-one-injective) and [surjective](#onto-surjective).\r\n\r\n### Inverse\r\n\r\nGiven a bijective function $f: x\\rightarrow y$, \r\n\r\n$$f^{-1}(y) = x \\iff y = f(x)$$\r\n\r\n### Power Function\r\n\r\n$$p_a(x) = x^a \\quad \\forall x \\in \\mathbb{R}^+$$\r\n\r\n# Graph Theory\r\n\r\n## Terms\r\n\r\n### Graph\r\n\r\nA graph is a structure of discrete objects with connections between them.\r\n\r\n### Vertices\r\n\r\nThe discrete objects.\r\n\r\n### Edges\r\n\r\nThe connections joining vertices.\r\n\r\n### Endpoints\r\n\r\nEach edge is associated with a set of either one or two vertices.\r\n\r\n### Loops\r\n\r\nAn edge with one endpoint.\r\n\r\n### Parallel \r\n\r\nAn endpoint that shares two or more distinct edges.\r\n\r\n### Connectedness\r\n\r\nAn edge connects two endpoints.\r\n\r\n### Adjacent\r\n\r\nTwo vertices that are connected by an edge.\r\n\r\n### Incident\r\n\r\nAn edge is incident to a vertex.\r\n\r\n### Degree\r\n\r\n## Types of Graphs\r\n\r\n### Directed Graph (digraph)\r\n\r\n### Simple Graph\r\n\r\n### Complete Graph\r\n\r\n### Complete Bipartite Graph\r\n\r\n### Subgraph\r\n\r\n## Applications\r\n\r\n### Walks\r\n\r\n#### Closed Walk\r\n\r\n### Trails\r\n\r\n#### Euler Trail\r\n\r\n### Paths\r\n\r\n### Circuit\r\n\r\n#### Simple Circuit\r\n\r\n#### Hamiltonian Circuit\r\n\r\n## Graph Representation\r\n\r\n### Adjacentcy List\r\n\r\nAn adjacency list is usually used in the case of sparse graphs, where $|E| << |V|^2$.\r\n\r\nA list of the vertices a particular vertex is connected to is what an adjacentcy list consists of.\r\n\r\n### Adjacentcy Matrix\r\n\r\nIn this case, an adjacency matrix is used where $|E|$ is close to $|V|^2$. \r\n\r\n## Algorithms\r\n\r\n### Topological Sort\r\n\r\nTopological sort sorts directed acyclic graphs. It is usually used like a dependency graph.\r\n\r\n$(u, v)$ represents an edge in the edge set.\r\n\r\n## Graph Terminology\r\n\r\nGiven a graph $G = (V, E)$ where $V$ is a vertex set and $E$ is an edge set:\r\n\r\n### Isolation\r\n\r\nA vertex is isolated if its degree is zero, or in other words it has no edges.\r\n\r\n### Path\r\n\r\nA path of length $k$ from vertex $u$ to $u\'$ in a graph $G=(V,E)$ is a sequence \r\n\r\n$$(v_0, v_1, \\dots, v_k)$$\r\n\r\nsuch that $u = v_0$, $u\' = v_k$ and $(v_{i - 1}, v_i) \\in E$ for $i = 1, 2, \\dots, k$.\r\n\r\n### Directed Graph\r\n\r\nA directed graph contains edges that are directed.\r\n\r\n- $V$ is a finite set\r\n- $E$ is a binary relation on $V$.\r\n- Self-loops are possible\r\n\r\n#### Incidence\r\n\r\nAn edge $(u, v)$ is incident from $u$ and indicent to $v$. In other words, the edge is directed from $u$ to $v$.\r\n\r\n#### Adjacency\r\n\r\nGiven an edge $(u, v)$, vertex $u$ is adjacent to $v$, but not vice versa.\r\n\r\n#### Degree\r\n\r\nThe degree of a directed graph is its in-degree plus out-degree vertices.\r\n\r\n#### Cycle\r\n\r\nA path of a directed graph forms a cycle if for a path $(v_0, v_1, \\dots, v_k)$ $v_0 = v_k$ and the path contains at least an edge.\r\n\r\n### Undirected graph\r\n\r\nAn undirected graph contains edges that are bidirectional.\r\n\r\n- $E$ is a set ${u, v}$ such that $u, v \\in V$ and $u \\neq v$.\r\n\r\n#### Adjacency\r\n\r\nGiven an edge $(u, v)$, the vertices $u, v$ are adjacent to each other.\r\n\r\n#### Degree\r\n\r\nThe degree of an undirected graph is the number of incident edges onto a vertex.\r\n\r\n#### Connectedness\r\n\r\nAn undirected graph is connected if every vertex is reachable from all other verticies.\r\n\r\n### Isomorphic Graphs\r\n\r\nTwo graphs $G=(V,E)$ and $G\'=(V\',E\')$ are isomorphic if there exists a bijection $f: V \\rightarrow V\'$ such that $(u,v) \\in E$ iff $(f(u), f(v)) \\in E\'$.\r\n\r\nIn other words the two graphs $G$ and $G\'$ contain the same topology.\r\n\r\n### Relaxation\r\n\r\nFor each vertex $v \\in V$, we have an attribute $v.distance$ that checks whether we can improve the shortest path to $v$ foun so far by going through $u$.\r\n\r\nRelaxating an edge $(u,v)$ is merely a test to see if we can improve the shortest path to $v$ so far from the node $u$.\r\n\r\nWe update $v.distance$ if $v.distance > u.distance + w(u,v)$ to $v.distance = u.distance + w(u,v)$.\r\n'}}]);