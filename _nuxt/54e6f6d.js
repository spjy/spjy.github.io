(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{515:function(n,e,r){"use strict";r.r(e),e.default='---\r\nheader: Kubernetes\r\ndescription: Orchestrated container management and deployment.\r\n---\r\n\r\n# Kubernetes (K8s)\r\n\r\nKubernetes is a comprehensive system that handles the management and deployment of containerized applications (i.e. [Docker containers]()). It can handle aspects such as clustering, scheduling, load balancing, networking, scaling and even CI/CD. \r\n\r\n## Kubernetes Jargon\r\n\r\n#### Kubernetes Clusters\r\n\r\nA Kubernetes Cluster is the collection of computers or virtual machines that Kubernetes controls such that the cluster can function in unison. \r\n\r\nIt consists of:\r\n\r\n* [A Master]()\r\n* [Node(s)]()\r\n\r\n#### Master\r\n\r\nThe master of a cluster is the central body that manages the cluster.\r\n\r\nIt is in charge of:\r\n* Scheduling\r\n* Maintaining application states\r\n* Scaling applications\r\n* Updating\r\n\r\n#### Nodes\r\n\r\nNodes work for the master, and they run applications. They are able to communicate with the master through the Kubernetes API.\r\n\r\nNodes consist of:\r\n\r\n* A Kubelet\r\n* A container runtime\r\n* Containerized application(s)\r\n\r\n#### Kubernetes Deployment\r\n\r\nWhen a cluster gets created, you can begin a deployment for a Pod. A Kubernetes Deployment is a specified configuration telling Kubernetes how to create and update your application instances. It consists of:\r\n* Replica set configurations\r\n* Update strategy configurations\r\n\r\nScaling is handled through creating replica sets of a pod and increase or decrease instances as needed. Replica sets can also be used for redundancy to avoid downtime.\r\n\r\nThe update strategy handles rolling updates.\r\n\r\n#### Kubernetes Pods\r\n\r\nA Kubernetes Pod is an instance of an application. It consists of at least one container and any associated containers/resources. In addition to including containers, Pods store:\r\n* Networking information\r\n* Configurations for the container\r\n\r\nOn the other hand, it can isolate container specific resources such as:\r\n* Processes\r\n* Filesystems\r\n* Namespaces\r\n\r\nPods are configured through a yaml configuration file.\r\n\r\n```yaml\r\napiVersion: v1\r\nkind: Pod\r\nmetadata:\r\n  name: app-name\r\n  namespace: app-example\r\n  labels:\r\n    app: app\r\n    ui: ui\r\n    api: api\r\nspec:\r\n  containers:\r\n  - name: app-container\r\n    image: user/container-name:latest\r\n    resources:\r\n      limits:\r\n        memory: "200Mi"\r\n      requests:\r\n        memory: "100Mi"\r\n    command: ["stress"]\r\n    args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]\r\n```\r\n\r\n#### Kubernetes Service\r\n\r\nA Kubernetes Service is a configuration that handles the networking portion of nodes. For instance, you can assign proxies, domains, DNS services, internal IP addresses, external IP addresses or ports to a node.\r\n\r\n#### CI/CD\r\n\r\nKubernetes is also capable of CI/CD. It is intelligent enough to implement "rolling updates" such that your services do not experience downtime if an update is needed. It does this by updating one pod at a time such that one is always available.\r\n\r\n#### Namespaces\r\n\r\nA namespace contains a project and its workloads while also partitioning it from other projects.\r\n\r\n## Additional Terminology\r\n\r\n#### ConfigMaps and secrets\r\n\r\n#### Persistent Volumes\r\n\r\nNetwork storage.\r\n\r\n#### Network and Container Network Interface\r\n\r\n#### Network Policies\r\n\r\n* Firewalls\r\n\r\n#### HELM Package Manager\r\n\r\n#### RBAC\r\n\r\nAuthentication management for Kubernetes.\r\n\r\n#### Horizontal Pod Autoscaler\r\n\r\nAbility to launch more instances of an application automatically.\r\n\r\n#### Daemon Sets\r\n\r\nAbility to run  identically on each node like:\r\n* Logging\r\n* Monitoring\r\n\r\n#### Stateful Sets\r\n\r\n* Provisioning\r\n* Mounting\r\n* Has a constant identifier\r\n* Always launches on the same server\r\n\r\n#### Cron Jobs\r\n\r\n* Scheduled jobs to run.\r\n\r\n## Kube Control (kubectl)\r\n\r\nTo interface with a Kubernetes instance, download the Kubernetes CLI, aka kubectl.\r\n\r\n### Common Commands\r\n\r\n#### kubectl\r\n\r\n## Minikube\r\n\r\nMinikube is a local instance of Kubernetes. It is **not** recommended for production!\r\n\r\n## General process for launching your stack into Kubernetes\r\n\r\n1. Partition a namespace in Kubernetes for your project or stack. Here you can apply:\r\n* Quotas or limits to your hardware\r\n* Create network policies for internet traffic\r\n\r\n2. Create a Deployment (or a controller manager).\r\n\r\n3. Create a Service. It handles:\r\n* IP address/port assignments\r\n* DNS servers\r\n* Load balancing\r\n* Proxies/Ingress (e.g. nginx)\r\n'}}]);